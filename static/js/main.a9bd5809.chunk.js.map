{"version":3,"sources":["fonts/CreteRound-Regular.ttf","components/Welcome/Wallpaper/Wallpaper.js","components/Welcome/SocialMedia/SocialMedia.js","components/Welcome/TagLine/TagLine.js","components/Welcome/Welcome.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Wallpaper","className","autoPlay","playsInline","muted","loop","id","src","type","React","Component","SocialMedia","href","icon","faTiktok","faReddit","faTwitter","faItchIo","faTwitch","faGithub","faYoutube","faPatreon","faDonate","TagLine","alt","Welcome","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wPAAAA,EAAOC,QAAU,IAA0B,gD,mHCG9BC,G,YAAb,uKAEQ,OAAO,oCACH,yBAAKC,UAAU,oBACf,yBAAKA,UAAU,aACX,2BAAOC,UAAQ,EAACC,aAAW,EAACC,OAAK,EAACC,MAAI,EAACC,GAAG,QACtC,4BAAQC,IAAI,WAAWC,KAAK,qBANhD,GAA+BC,IAAMC,Y,8BCGxBC,EAAb,uKAEQ,OAAO,yBAAKV,UAAU,gBAClB,uBAAGW,KAAK,oCAAmC,kBAAC,IAAD,CAAiBC,KAAMC,OAClE,uBAAGF,KAAK,qCAAoC,kBAAC,IAAD,CAAiBC,KAAME,OACnE,uBAAGH,KAAK,gCAA+B,kBAAC,IAAD,CAAiBC,KAAMG,OAC9D,uBAAGJ,KAAK,6BAA4B,kBAAC,IAAD,CAAiBC,KAAMI,OAC3D,uBAAGL,KAAK,kCAAiC,kBAAC,IAAD,CAAiBC,KAAMK,OAChE,uBAAGN,KAAK,+BAA8B,kBAAC,IAAD,CAAiBC,KAAMM,OAC7D,uBAAGP,KAAK,6BAA4B,kBAAC,IAAD,CAAiBC,KAAMO,OAC3D,uBAAGR,KAAK,oCAAmC,kBAAC,IAAD,CAAiBC,KAAMQ,OAClE,uBAAGT,KAAK,2CAA0C,kBAAC,IAAD,CAAiBC,KAAMS,YAXrF,GAAiCb,IAAMC,WCH1Ba,G,MAAb,uKAEQ,OAAO,yBAAKtB,UAAU,YAClB,yBAAKM,IAAI,eAAeN,UAAU,OAAOuB,IAAI,cAHzD,GAA6Bf,IAAMC,YCGtBe,EAAb,uKAEQ,OAAO,oCACH,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,WALZ,GAA6BhB,IAAMC,WCF5B,SAASgB,IACZ,OACI,kBAAC,EAAD,MCMYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a9bd5809.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/CreteRound-Regular.cb7a850d.ttf\";","import React from 'react';\nimport './Wallpaper.scss';\n\nexport class Wallpaper extends React.Component {\n    render() {\n        return <>\n            <div className=\"wallpaper flash\"></div>\n            <div className=\"wallpaper\">\n                <video autoPlay playsInline muted loop id=\"logo\">\n                    <source src=\"logo.mp4\" type=\"video/mp4\" />\n                </video>\n            </div>\n        </>;\n    }\n}\n\n","import React from 'react';\nimport './SocialMedia.scss';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTwitter, faItchIo, faTwitch, faGithub, faYoutube, faPatreon, faTiktok, faReddit} from \"@fortawesome/free-brands-svg-icons\"\nimport { faDonate } from \"@fortawesome/free-solid-svg-icons\"\n\nexport class SocialMedia extends React.Component {\n    render() {\n        return <div className=\"social-media\">\n            <a href=\"https://www.tiktok.com/@thrideas\"><FontAwesomeIcon icon={faTiktok} /></a>\n            <a href=\"https://www.reddit.com/u/thrideas\"><FontAwesomeIcon icon={faReddit} /></a>\n            <a href=\"https://twitter.com/thrideas\"><FontAwesomeIcon icon={faTwitter} /></a>\n            <a href=\"https://thrideas.itch.io/\"><FontAwesomeIcon icon={faItchIo} /></a>\n            <a href=\"https://www.twitch.tv/thrideas\"><FontAwesomeIcon icon={faTwitch} /></a>\n            <a href=\"https://github.com/thrideas\"><FontAwesomeIcon icon={faGithub} /></a>\n            <a href=\"https://shorturl.at/ahuvU\"><FontAwesomeIcon icon={faYoutube} /></a>\n            <a href=\"https://www.patreon.com/thrideas\"><FontAwesomeIcon icon={faPatreon} /></a>\n            <a href=\"https://streamelements.com/thrideas/tip\"><FontAwesomeIcon icon={faDonate} /></a>\n            {/*<!--https://lbry.tv/-->*/}\n        </div>;\n    }\n}\n\n","import React from 'react';\nimport './TagLine.scss';\n\nexport class TagLine extends React.Component {\n    render() {\n        return <div className=\"tag-line\">\n            <img src=\"OnlyText.png\" className=\"logo\" alt=\"Logo\" />\n        </div>\n    }\n}\n\n","import React from 'react';\nimport './Welcome.scss';\nimport { Wallpaper } from './Wallpaper/Wallpaper';\nimport { SocialMedia } from './SocialMedia/SocialMedia';\nimport { TagLine } from './TagLine/TagLine';\n\nexport class Welcome extends React.Component {\n    render() {\n        return <>\n            <Wallpaper />\n            <SocialMedia />\n            <TagLine />\n        </>;\n    }\n}\n\n","import React from 'react';\nimport './App.scss';\nimport { Welcome } from './Welcome/Welcome';\n\nexport function App() {\n    return (\n        <Welcome />\n    );\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport './fonts/CreteRound-Regular.ttf';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}